#summary FPGA implementation notes
#labels Phase-Design,Featured

= Clock distribution =

[http://vector06cc.googlecode.com/svn/trunk/doc/clocks.png]

Clock distribution:
 * clk24 is the master clock, also VGA pixel clock 
 * ce12 (12MHz) is 512 pixel mode pixel clock (PAL)
 * ce6 (6MHz) is the pixel/ram address clock
 * ce3 (3MHz) this is the main CPU clock enable
 * ce3v (3MHz) is unused --> floppy CPU boohoo
 * video_slice is high when video adapter wants RAM
 * pipe_ab is an internal signal in the video controller, invisible in this short simulation
 * timer_vi53_ce is the slow 1.5MHz clock enable for 8253 soundnik

= Floppy Drive =
_This section describes work in progress_

== Theory (Fantasy) ==
=== Overview ===
The floppy drive system is being implemented as a separate entity based on a 6502 CPU. M4K blocks are used for memory, namely 24576 bytes of main ram + 256 bytes of zero page and stack ram. According to Quartus report, 201984 memory bits are used, which is 84% of the device on DE1 and which is most likely unacceptable. 

The code that lives in the 6502 unit is written in C and compiled by [http://www.cc65.org cc65] compiler. C language library, crt0.s and linker configuration file, vector.lc, are provided. Architecture is mostly defined by vector.lc file which contains memory map and specialio.h, which defines I/O locations. It seems that for succesful operation, memory size 1 byte smaller than real should be specified -- ~~must~~ could be investigated. 

=== Code size concerns ===
FAT support is based on Elm-Chan's awesome [http://elm-chan.org/fsw/ff/00index_e.html Generic FAT Filesystem module]. This module is the best one can ever wish for, providing most everything out of the box. However, being exceptionally robust, it's also not tiny.

cc65 produces some fat code, although knowing the 6502, cc65 is probably not to be blamed. On a positive note, it's a fully functional _real_ C and not some fake paw mockup. Complete code probably will NOT fit in 16K and that would change the design dramatically, requiring access to SRAM and a fetch of full-fledged ROM-image from the SD card by a smaller ROM-image.

=== WD1793 ===
Vector used a Russki clone of WD1793 floppy drive controller. It is called so because the design originates from Marie Antoinette, for which she was guillotined in 1793.
 * [http://www.hansotten.com/msxwd1793.html MSX Info Pages of WD1793]
 * [http://svn.akop.org/psp/trunk/fms/EMULib/ EMULib has C-source of the WD1793 emulator]
 * [http://elm-chan.org/docs/mmc/mmc_e.html ELM: How to MMC/SD]
 * [http://elm-chan.org/fsw/ff/00index_e.html Generic FAT Filesystem module]
Also see Technical_Description for Vector-06C port map, [VectorSecrets_by_Lebedev Секреты Вектора от Лебедева] and [SVK1_Floppy Секреты Вектора и Кристы]

== Practice ==

=== Preliminary HW layer tests ===
[http://vector06cc.googlecode.com/svn/trunk/doc/wd-clocks-preliminarytest.png]
Test simulation run of the HW layer. The "program" being executed here would be roughly:
{{{
 RESET (as in hw pin)
 
 RESTORE:     (0)=0F
 TRACK:       (1)=12
 SEEK:        (0)=1F
 STEPF:       (0)=4F (no update)
 STEP:        (0)=3F (previous direction, update)
 READ STATUS ==> 22
 SECTOR:      (2)=03
 READADDR:    (0)=C0 
   -> CPU command issued
   <- CPU completion status set
   -> CPU "ACK" command issued
   DRQ set
 READ STATUS ==> 03
 READ DATA
 READ DATA
 ...
}}}
 
Remarks:
 * ~~Buffer read takes 2 clocks as opposed to single-clock operation for everything else~~ not anymore
 * 9ns is about minimal required settle time for `idata`

=== CPU Requests ===
||CPU_REQUEST_READ || 8'h10 || Request to read one sector at oTRACK, oSECTOR, bit 0 is side ||
||CPU_REQUEST_WRITE||8'h20 ||  Request to write one sector at oTRACK, oSECTOR; bit 0 is side ||
||CPU_REQUEST_READADDR || 8'h30|| Request to read sector address (return 6 byte header) ||
||CPU_REQUEST_ACK|| 8'h80|| Acknowledge last operation ||